for i in range(10):
  print([comb(i, j) for j in range(i + 1)])

import matplotlib.pyplot as plt
import numpy as np
import scipy.stats as stats
import pandas as pd

from scipy.special import comb

comb(8, 3) #There are 56 ways to choose 3 from 56.

comb(8, 5) #There are 56 ways to choose 5 from 8

#plot
x = np.arange(9)
candy = stats.binom(8, 0.5)
plt.bar(x, candy.pmf(x))

#p(2 defective)
candy.pmf(2)

candy.pmf(0) + candy.pmf(1) + candy.pmf(2)

#p(no more than 2)
candy.cdf(2)

#distribution
population = stats.binom(20, .9)

#p(all 20)
population.pmf(20)

#p(17)

population.pmf(17)

x = np.arange(21)
plt.bar(x, population.pmf(x))

table = pd.DataFrame({'survivors': x, 'probability': population.pmf(x)})
table.head()

stats.binom(50, 0.9).cdf(48) #we expect 2.86% survive so probably not

x = np.arange(51)
plt.bar(x, stats.binom(50, .9).pmf(x))

stats.binom(50, 0.9).cdf(48)

x = np.arange(11)
y = stats.binom(10, 0.2).pmf(x)
plt.bar(x, y)

x = np.arange(21)
dist = stats.binom(20, 0.2)
y = dist.pmf(x) #all possible outcomes
plt.bar(x, y)

dist.pmf(12) #probability of 12 successes

x = np.arange(31)
dist = stats.binom(30, 0.13)
y = dist.pmf(x) #all possible outcomes
plt.bar(x, y)

dist.mean() #expected value is 3.9 -- should look like where high point in plot is

dist.var() #variance

x = np.arange(301)
dist = stats.binom(300, 0.13)
y = dist.pmf(x) #all possible outcomes
plt.bar(x, y)

dist.mean()

dist.var()

x = np.arange(3001)
dist = stats.binom(3000, 0.13)
y = dist.pmf(x) #all possible outcomes
plt.bar(x, y)

dist.mean()

dist.var()

pd.DataFrame({'n': [30, 300, 3000], 'mean': [3.9, 39, 390],
              'variance': [3.39, 33.9, 339]})

2*1 - 3 + 2*2 - 3 + 2*3 - 3 + 2*4 - 3 + 2*5 - 3

def s(x): return 1/x

np.arange(1, 11)

import numpy as np

sum(s(np.arange(1, 11)))

sum([1/1, 1/2, 1/3, 1/4, 1/5, 1/6, 1/7, 1/8, 1/9, 1/10])

def g(i): return 3*i**2 - 2*i #expression to sum

x = np.arange(4, 10) #values to sum

sum(g(x)) #sum

ex1 = stats.norm(10, 3)
x = np.linspace(0, 20, 1000)
plt.plot(x, ex1.pdf(x))

1 - ex1.cdf(15)

ex1 = stats.norm(0, 3)
x = np.linspace(-10, 10, 1000)
plt.plot(x, ex1.pdf(x))

ex1.cdf(0)

ex1 = stats.norm(0, 1)
x = np.linspace(-3, 3, 1000)
plt.plot(x, ex1.pdf(x))

ex1.cdf(1) - ex1.cdf(-1)












